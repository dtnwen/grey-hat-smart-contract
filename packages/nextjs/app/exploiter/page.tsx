"use client";

import { useState } from "react";
import { parseEther, stringToHex } from "viem";
import { useSendTransaction } from "wagmi";
import { Address, AddressInput, EtherInput, InputBase } from "~~/components/scaffold-eth";
import { useScaffoldReadContract } from "~~/hooks/scaffold-eth";

const Exploiter = () => {
  const [address, setAddress] = useState("");
  const [ethAmount, setEthAmount] = useState("0");

  // const { address: connectedAddress } = useAccount();
  const [message, setMessage] = useState<string>("Hello my dear victim, . . .");
  const { data: hash, sendTransaction, isPending } = useSendTransaction();

  const { data: implemented } = useScaffoldReadContract({
    contractName: "GreyHat",
    functionName: "implemented",
    args: [address],
  });

  const sendMessage = async () => {
    try {
      console.log("Pending", isPending);
      const hash = await sendTransaction({
        to: address,
        value: parseEther(ethAmount),
        data: stringToHex(message),
      });
      console.log(hash);
    } catch (error) {
      console.error("Error sending message", error);
    }
  };

  return (
    <div>
      <div>
        <h1>Congrats Hacker!</h1>
        What you did is impressive! Now it&apos;s time to become something even bigger, become a grey hat hacker!
      </div>
      <div>
        <p>First, let&apos;s check if your unluckily victim is ready!</p>
        <AddressInput onChange={setAddress} value={address} placeholder="Input your address" />

        <span>Victim&apos;s address</span>
        <Address address={address} />
      </div>

      {address && !implemented && (
        <div>
          <p>Seems like they haven&apos;t ready yet! Lets give them a heads up</p>
          <div>
            <span>Message</span>
            <InputBase name="message" placeholder="My dear victim, . . ." value={message} onChange={setMessage} />
          </div>
          <div>
            <span>Send some ETH to incentivize?</span>
            <EtherInput value={ethAmount} onChange={amount => setEthAmount(amount)} />
          </div>
          <button disabled={isPending} className="btn btn-primary" onClick={sendMessage}>
            {isPending ? "Sending ..." : "Send"}
            {hash && <div>Message transaction: {hash}</div>}
          </button>
        </div>
      )}

      {implemented && (
        <div>
          <p>Great, victim is ready to reward you bounty!</p>
        </div>
      )}
    </div>
  );
};

export default Exploiter;
