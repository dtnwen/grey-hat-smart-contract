"use client";

import { useState } from "react";
import { isAddress, parseEther, stringToHex } from "viem";
import { useAccount, useSendTransaction } from "wagmi";
import { Address, AddressInput, EtherInput, InputBase } from "~~/components/scaffold-eth";
import { useScaffoldReadContract, useScaffoldWriteContract } from "~~/hooks/scaffold-eth";

const Exploiter = () => {
  const { address: connectedAddress } = useAccount();
  const [victimAddress, setVictimAddress] = useState("");
  const [incentiveETH, setIncentiveETH] = useState("");
  const [depositETH, setDepositETH] = useState("");
  const [message, setMessage] = useState<string>("Hello my dear victim, . . .");

  const { data: hash, sendTransaction, isPending } = useSendTransaction();

  const { data: implemented } = useScaffoldReadContract({
    contractName: "GreyHat",
    functionName: "implemented",
    args: [victimAddress],
  });

  // const { data: bountyCalculate } = useScaffoldReadContract({
  //   contractName: "GreyHat",
  //   functionName: "bountyCalculate",
  //   args: [parseEther(depositETH)],
  // });

  const { writeContractAsync: writeYourContractAsync, isPending: isWritingPending } =
    useScaffoldWriteContract("GreyHat");

  const sendMessage = async () => {
    try {
      const hash = await sendTransaction({
        to: victimAddress,
        value: parseEther(incentiveETH),
        data: stringToHex(message),
      });
      console.log(hash);
    } catch (error) {
      console.error("Error sending message", error);
    }
  };

  const depositExploitedFund = async () => {
    try {
      await writeYourContractAsync({
        functionName: "depositExploitedFund",
        args: [victimAddress],
        value: parseEther(depositETH),
      });
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <div>
      <div>
        <div className="flex flex-row">
          <span className="align-middle">Congrats Hacker </span>
          <Address address={connectedAddress} disableAddressLink />
        </div>
        What you did is impressive! Now it&apos;s time to become something even bigger, become a grey hat hacker!
      </div>
      <div>
        <p>First, let&apos;s check if your unlucky victim is ready!</p>
        <span>Victim&apos;s address</span>
        <AddressInput onChange={setVictimAddress} value={victimAddress} placeholder="vitalik.eth" />
      </div>

      {isAddress(victimAddress) && !implemented && (
        <div>
          <p>Seems like they haven&apos;t ready yet! Lets give them a heads up</p>
          <div>
            <span>Message</span>
            <InputBase name="message" placeholder="My dear victim, . . ." value={message} onChange={setMessage} />
          </div>
          <div>
            <span>Send some ETH to encourage?</span>
            <EtherInput value={incentiveETH} placeholder="1" onChange={amount => setIncentiveETH(amount)} />
          </div>
          <button disabled={isPending} className="btn btn-primary" onClick={sendMessage}>
            {isPending ? "Sending ..." : "Send"}
            {hash && <div>Message transaction: {hash}</div>}
          </button>
        </div>
      )}

      {implemented && (
        <div>
          <p>Great, victim is ready to reward you bounty!</p>
          <span>Deposit ETH</span>
          <EtherInput value={depositETH} placeholder="1000" onChange={e => setDepositETH(e)} />
          <p>You will recieve {Number(depositETH) * 0.15} Îž after depositing, good work!</p>
          <button className="btn btn-primary" disabled={isWritingPending} onClick={depositExploitedFund}>
            Deposit
          </button>
        </div>
      )}
    </div>
  );
};

export default Exploiter;
